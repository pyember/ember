"""
Map Parallel Ensemble Pattern Implementation

This module implements the MapEnsemble pattern, a foundational distributed inference pattern
that enables parallel execution of a bijective mapping utilizing multiple language model instances.
This pattern addresses several critical needs in Compound AI Systems applications:

The pattern serves as a foundational building block for more complex NON map patterns
"""

from __future__ import annotations
from typing import List, Type

from ember.core.registry.model.model_module.lm import LMModule
from ember.core.registry.operator.base.operator_base import Operator
from ember.core.registry.specification.specification import Specification
from ember.core.types.ember_model import EmberModel

class MapEnsembleOperatorInputs(EmberModel):
    """
    Structured input model for map ensemble inference operations.

    This model defines the minimal input required for map ensemble operations,
    utilized to perform some kind of language inference based operation to map
    the inputs to outputs. This model has been kept intentionally vague for maximum
    configurability.

    Attributes:
        inputs: The list of strings to be sent to the same language models in the ensemble.
                The individual pieces of text will be transformed based on the operator's
                specification template. 
    """
    inputs: List[str]

class MapEnsembleOperatorOutputs(EmberModel):
    """
    Structured output model for map ensemble inference results.

    This model provides a standardized container for the outputs generated by the map ensemble.
    The outputs are expected to be the transformed versions of the input strings, based on the
    operator's specification template.

    Attributes:
        outputs: The list of transformed strings, each corresponding to the input string
                 processed by the map ensemble operation.
    """
    outputs: List[str]

class SummarizationMapEnsemblerSpecification(Specification):
    """Specification for SummarizationMapEnsembler defining the summarization map ensembler."""
    prompt_template: str = (
        "You are a summarization expert tasked with creating concise yet comprehensive summaries.\n"
        "Given the following text: {text}\n"
        "Please provide a clear and coherent summary that captures the key points while maintaining readability.\n"
        "Your summary should be structured as follows:\n"
        "Summary: <Your concise summary of the main points>\n"
    )
    input_model: Type[EmberModel] = MapEnsembleOperatorInputs
    structured_output: Type[EmberModel] = MapEnsembleOperatorOutputs


class MapEnsembleOperator(Operator[MapEnsembleOperatorInputs, MapEnsembleOperatorOutputs]):
    """
    Executes a mapping operation across a list of inputs using a language model.

    Sends each input string to the language model and collects all responses.
    This enables parallel processing of multiple inputs through the same model,
    which can be used for batch processing, data transformation, or other mapping operations.

    The execution is implicitly parallel, with each input potentially being processed
    concurrently depending on the implementation.
    """

    specification: Specification = Specification(
        input_model=MapEnsembleOperatorInputs, structured_output=MapEnsembleOperatorOutputs
    )
    lm_module: LMModule

    def __init__(self, *, lm_module: LMModule) -> None:
        """
        Initializes the map ensemble with a language model module.

        The constructor follows the Dependency Injection principle, accepting
        a pre-configured LMModule instance rather than creating it internally.
        This approach provides maximum flexibility for map ensemble configuration.

        Args:
            lm_module: Language model module to execute the mapping operation.
                      This module must conform to the LMModule interface.
        """
        self.lm_module = lm_module

    def forward(self, *, map: MapEnsembleOperatorInputs) -> MapEnsembleOperatorOutputs:
        """
        Executes the mapping operation across all input strings.

        Args:
            inputs: Contains the list of strings to process.

        Returns:
            Contains all model responses in an ordered list matching
            the original inputs order.
        """
        outputs: List[str] = [
            self.lm_module(
                prompt=self.specification.render_prompt(
                    inputs={"input": input_text}
                )
            ) 
            for input_text in map.inputs
        ]
        return MapEnsembleOperatorOutputs(outputs=outputs)
